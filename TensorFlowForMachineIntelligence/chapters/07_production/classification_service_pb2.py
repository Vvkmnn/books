# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: classification_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='classification_service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x1c\x63lassification_service.proto\"&\n\x15\x43lassificationRequest\x12\r\n\x05input\x18\x01 \x01(\x0c\"?\n\x16\x43lassificationResponse\x12%\n\x07\x63lasses\x18\x01 \x03(\x0b\x32\x14.ClassificationClass\"2\n\x13\x43lassificationClass\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05score\x18\x02 \x01(\x02\x32T\n\x15\x43lassificationService\x12;\n\x08\x63lassify\x12\x16.ClassificationRequest\x1a\x17.ClassificationResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CLASSIFICATIONREQUEST = _descriptor.Descriptor(
  name='ClassificationRequest',
  full_name='ClassificationRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='input', full_name='ClassificationRequest.input', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=32,
  serialized_end=70,
)


_CLASSIFICATIONRESPONSE = _descriptor.Descriptor(
  name='ClassificationResponse',
  full_name='ClassificationResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='classes', full_name='ClassificationResponse.classes', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=72,
  serialized_end=135,
)


_CLASSIFICATIONCLASS = _descriptor.Descriptor(
  name='ClassificationClass',
  full_name='ClassificationClass',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ClassificationClass.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='ClassificationClass.score', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=137,
  serialized_end=187,
)

_CLASSIFICATIONRESPONSE.fields_by_name['classes'].message_type = _CLASSIFICATIONCLASS
DESCRIPTOR.message_types_by_name['ClassificationRequest'] = _CLASSIFICATIONREQUEST
DESCRIPTOR.message_types_by_name['ClassificationResponse'] = _CLASSIFICATIONRESPONSE
DESCRIPTOR.message_types_by_name['ClassificationClass'] = _CLASSIFICATIONCLASS

ClassificationRequest = _reflection.GeneratedProtocolMessageType('ClassificationRequest', (_message.Message,), dict(
  DESCRIPTOR = _CLASSIFICATIONREQUEST,
  __module__ = 'classification_service_pb2'
  # @@protoc_insertion_point(class_scope:ClassificationRequest)
  ))
_sym_db.RegisterMessage(ClassificationRequest)

ClassificationResponse = _reflection.GeneratedProtocolMessageType('ClassificationResponse', (_message.Message,), dict(
  DESCRIPTOR = _CLASSIFICATIONRESPONSE,
  __module__ = 'classification_service_pb2'
  # @@protoc_insertion_point(class_scope:ClassificationResponse)
  ))
_sym_db.RegisterMessage(ClassificationResponse)

ClassificationClass = _reflection.GeneratedProtocolMessageType('ClassificationClass', (_message.Message,), dict(
  DESCRIPTOR = _CLASSIFICATIONCLASS,
  __module__ = 'classification_service_pb2'
  # @@protoc_insertion_point(class_scope:ClassificationClass)
  ))
_sym_db.RegisterMessage(ClassificationClass)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ClassificationServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.classify = channel.unary_unary(
        '/ClassificationService/classify',
        request_serializer=ClassificationRequest.SerializeToString,
        response_deserializer=ClassificationResponse.FromString,
        )


class ClassificationServiceServicer(object):

  def classify(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClassificationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'classify': grpc.unary_unary_rpc_method_handler(
          servicer.classify,
          request_deserializer=ClassificationRequest.FromString,
          response_serializer=ClassificationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ClassificationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaClassificationServiceServicer(object):
  def classify(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaClassificationServiceStub(object):
  def classify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  classify.future = None


def beta_create_ClassificationService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('ClassificationService', 'classify'): ClassificationRequest.FromString,
  }
  response_serializers = {
    ('ClassificationService', 'classify'): ClassificationResponse.SerializeToString,
  }
  method_implementations = {
    ('ClassificationService', 'classify'): face_utilities.unary_unary_inline(servicer.classify),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ClassificationService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('ClassificationService', 'classify'): ClassificationRequest.SerializeToString,
  }
  response_deserializers = {
    ('ClassificationService', 'classify'): ClassificationResponse.FromString,
  }
  cardinalities = {
    'classify': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ClassificationService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
